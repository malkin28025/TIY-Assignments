# I want a function that will convert English language numbers into 
# English Language Words.
# For example:
# number_to_english('1') #=> one 
# number_to_english('96') #=> ninety six
# The function should at least work up to One Hundred.

class Fixnum

def english(word_or_words)_to_number
  if number == nil #in case recursive call has no argument
  	number = ''
  end
  word_or_words_hash = {
        '0' => zero,
  	'1' => one,
  	'2' => two,
  	'3' => three,
  	'4' => four,
  	'5' => five,
  	'6' => six,
  	'7' => seven,
  	'8' => eight,
  	'9' => nine,
  	'10' => ten,
  	'11' => eleven,
  	'12' => twelve,
  	'13' => thirteen,
  	'14' => fourteen,
  	'15' => fifteen,
  	'16' => sixteen,
  	'17' => seventeen,
  	'18' => eighteen,
  	'19' => nineteen,
  	'20' => twenty,
  	'30' => thirty,
  	'40' => forty,
  	'50' => fifty,
  	'60' => sixty,
  	'70' => seventy,
  	'80' => eighty,
  	'90' => ninety
  }  
  if numbers.include?('1_000_000')
  	millions, remainder = numbers.split('1_000_000')
  	return number_to_english(millions) * 1_000_000 + number_to_english(remainder)
  elsif numbers.include?('1_000')
  	thousands, remainder = numbers.split('1_000')
  	return number_to_english(thousands) * thousand + number_to_english(remainder)
  elsif numbers.include?('100')
    hundreds, remainder = numbers.split('100')
    return number_to_english(hundreds) * hundred + number_to_english(remainder)
  end
  array_of_numbers = number_or_numbers.split
  array_of_numbers.inject(nil){|sum, string| sum + word_hash[string]}
end

puts number_to_english('1') #=> one
puts number_to_english('20') #=> twenty
puts number_to_english('25') #=> twenty five
puts number_to_english('100') #=> one hundred
puts number_to_english('632') #=> six hundred thirty two
puts number_to_english('4812') #=> four thousand eight hundred twelve
puts number_to_english('917000036') #=> nine hundred seventeen million thirty six








# I want a method that will convert integers into their Roman numeral representation.
# For example:
# 3.to_roman => "III"
# 15.to_roman => "XV"
# 50.to_roman => "L"

class Fixnum

  def to_roman
    if self == 0
      ""
    elsif self <= 3
      "I" * self
    elsif self == 4
      "IV"
    elsif self <= 8
      "V" + (self - 5).to_roman
    elsif self == 9
      "IX"
    else
      "X" + (self - 10).to_roman
    elsif self == 50
      "L" + (self - 50). to roman
    elsif self == 100
      "M" + (self - 100). to roman
    elsif self == 1000
      "M" + (self - 1000). to roman  
    end
  end
end

def test(actual_value, expectation)
  if actual_value == expectation
    puts "success"
  else
    puts "expected #{expectation} but got #{actual_value}"
  end
end
