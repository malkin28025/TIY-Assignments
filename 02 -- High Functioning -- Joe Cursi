**Data Types**

1. **Numbers**
  - *Defined*: calculator function in Ruby. 
            - Two Types
              1. **Integers** are numbers with no decimal place.
              2. **Floats** are numbers with decimal places.
  - *Methods*:  1. puts "I will now count to 99..."
                   100.times {|number| puts number}
                   5.times {puts "Guess what?"}
                   puts "I'm done!"
                2. # First a visit from The Count...
                   1.upto(10) {|number| puts "#{number} Ruby loops, ah-ah-ah!"}
                3. # Then a quick stop at NASA...
                   puts "T-minus..."
                   10.downto(1) {|x| puts x}
                   puts "Blast-off!"
  - *Uses*:    adds, subtracts, multiplies, and divides.   
  
2. **Strings**
  - *Defined*: groups of letters in a program. 
  - *Methods*:  1. "washington".capitalize
                2. "UPPERCASE".downcase
                3. "lowercase".upcase
  - *Uses*:    can modify content to achieve a specific end.     
  
3. **Arrays**
  - *Defined*: is just a list in your computer that point to a number and are lined up in a row.. 
  - *Methods*:  1. Array.pop
                2. Array.each
                3. Array.include
  - *Uses*:    can manipulate content within a list in different ways such as alphabetically 
               or where content is located on a page.  
  
4. **Hashes**
  - *Defined*: is like an array, however they refer to a slot not a number and not lined in a row,
               the content can be jumbled or randomly inputted. 
  - *Methods*:  1. hash = { :leia => "Princess from Alderaan", :han => "Rebel without a cause", :luke => "Farmboy turned Jedi"}
                   puts hash[:leia]
                   puts hash[:han]
                   puts hash[:luke]
                2. hash.delete
                3. hash.delete_if {|key, value| value.downcase.match("farmboy")}
  - *Uses*:     when you have a bunch of things you want to keep track ofbut they don't really 
                fit in an ordered list.
                
                
                
                
# I want a function that converts the word of a number (one) to it's actual number (1) up to 100.
# If I enter a word of a number, it should give me it's actual number.
def number (written_number)
if written_number == 'one'
elsif '1' written_number =
** (*Sorry, remembered that this exercise was presented on pgs. 76- 79in Chris Pines "Learn to Program". 
   Even after reading this in "Pre-work" weeks ago there is no way I could have figured this out.*)**
